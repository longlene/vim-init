[[plugins]]
repo = 'vimwiki/vimwiki'
on_cmd = [
        'VimwikiIndex',
        'VimwikiTabIndex',
        'VimwikiUISelect',
        'VimwikiDiaryIndex',
        'VimwikiMakeDiaryNote',
        'VimwikiMakeYesterdayDiaryNote',
        'VimwikiFollowLink',
        'VimwikiGoBackLink',
        'VimwikiSplitLink',
        'VimwikiVSplitLink',
        'VimwikiTabnewLink',
        'VimwikiNextLink',
        'VimwikiPrevLink',
        'VimwikiGoto',
        'VimwikiDeleteLink',
        'VimwikiRenameLink',
        'Vimwiki2HTML',
        'Vimwiki2HTMLBrowse',
        'VimwikiAll2HTML',
        'VimwikiSearch',
        'VimwikiTable',
]
hook_source = '''
let wiki = {}
let wiki.path = '~/.vimwiki/'
let wiki.ext = '.wiki'
let wiki.syntax = 'markdown'
let g:vimwiki_list = [wiki]
let g:vimwiki_use_mouse = 1
let g:vimwiki_camel_case = 0
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_CJK_length = 1
'''


[[plugins]]
repo = 'mattn/flappyvird-vim'
on_cmd = 'FlappyVird'

[[plugins]]
repo = 'will133/vim-dirdiff'
on_cmd = 'DirDiff'

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = 'NERDTreeToggle'
hook_add = '''
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "✹",
      \ "Staged"    : "✚",
      \ "Untracked" : "✭",
      \ "Renamed"   : "➜",
      \ "Unmerged"  : "═",
      \ "Deleted"   : "✖",
      \ "Dirty"     : "✗",
      \ "Clean"     : "✔︎",
      \ "Unknown"   : "?"
      \ }
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['Tagbar', 'TagbarToggle']
hook_source = '''
let g:tagbar_sort = 0
let g:tagbar_autofocus = 1
let g:tagbar_show_linenumbers = 1
let g:tagbar_compact = 1
'''

[[plugins]]
repo = 'junegunn/gv.vim'
depends = 'tpope/vim-fugitive'
on_cmd = 'GV'

[[plugins]]
repo = 'nhooyr/neoman.vim'
on_cmd = 'Nman'

[[plugins]]
repo = 'ujihisa/repl.vim'
depends = 'vimshell.vim'
on_cmd = 'Repl'

[[plugins]]
repo = 'deris/vim-rengbang'
on_cmd = 'RengBang'

[[plugins]]
repo = 'metakirby5/codi.vim'
on_cmd = 'Codi'

[[plugins]]
repo = 'bgrohman/vim-bg-sessions'
on_cmd = ['Sessions', 'SaveSession', 'LoadSession', 'DeleteSession']

[[plugins]]
repo = 'danro/rename.vim'
on_cmd = 'Rename'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_cmd = ['VimFiler', 'VimFilerBufferDir']
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_source = '''
call vimfiler#custom#profile('default', 'context', {
                \ 'safe':0, 
                \ 'auto_expand':1, 
                \ 'parent':0, 
                \ })
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimfiler_data_directory = $CACHE.'/vimfiler'

" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_readonly_file_icon = '✗'
let g:vimfiler_marked_file_icon = '✓'
'''
hook_add = 'nnoremap <silent> [Space]v :<C-u>VimFiler -invisible<CR>'

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
on_source = 'denite.nvim'
hook_source = '''
  let g:deol#prompt_pattern = '\w*%'
  " Set to $PATH.
  let s:bin = dein#get('vim-themis').rtp . '/bin'
  function! s:split_envpath(path) abort
    let delimiter = has('win32') ? ';' : ':'
    if stridx(a:path, '\' . delimiter) < 0
      return split(a:path, delimiter)
    endif
    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
    return map(split,'substitute(v:val, ''\\\([\\'
          \ . delimiter . ']\)'', "\\1", "g")')
  endfunction
  function! s:join_envpath(list, orig_path, add_path) abort
    let delimiter = has('win32') ? ';' : ':'
    return (stridx(a:orig_path, '\' . delimiter) < 0
          \ && stridx(a:add_path, delimiter) < 0) ?
          \   join(a:list, delimiter) :
          \   join(map(copy(a:list),
          \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
          \        delimiter)
  endfunction
  let $PATH = s:join_envpath(
        \ dein#util#_uniq(insert(
        \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
  let $THEMIS_HOME = dein#get('vim-themis').rtp
  unlet s:bin
  autocmd FileType deol call s:on_deol()
  function! s:on_deol() abort
    nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
    nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
  endfunction
'''
hook_add = '''
  nnoremap <silent> N :<C-u>call deol#new({'command': 'zsh'})<CR>
  nnoremap <silent> [Space]s :<C-u>Deol zsh<CR>
  nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = 'let g:vinarise_enable_auto_detect = 1'

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'katono/rogue.vim'
on_cmd = 'Rogue'
hook_add  =  '''
let g:rogue#directory = $CACHE.'/vim-rogue'
'''

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

[[plugins]]
repo = 'vim-utils/vim-man'
on_cmd = 'Man'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
on_cmd = 'DeinUpdate'

[[plugins]]
repo = 'vim-mail/vim-mail'
on_func = 'mail#client#open'

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'

[[plugins]]
repo = 'prettier/vim-prettier'
on_cmd = ['Prettier', 'PrettierAsync']

[[plugins]]
repo = 'tpope/vim-dadbod'
on_cmd = 'DB'

